#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                // Left half
                &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6
                &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6
                &kp TAB &kp Q &kp W &kp E &kp R &kp T &none
                &kp CAPS &kp A &kp S &kp D &kp F &kp G &none
                &kp LSFT &kp Z &kp X &kp C &kp V &kp B &none
                &kp LCTL &kp LGUI &kp LALT &kp SPACE &none &none &none

		// Right half
//                &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &kp PSCR
//                &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp EQUAL &kp NO
//                &kp Y &kp U &kp I &kp O &kp P &kp LBRC &kp RBRC
//                &kp H &kp J &kp K &kp L &kp SCLN &kp QUOTE &kp NO
//                &kp N &kp M &kp COMMA &kp DOT &kp SLASH &kp RALT &kp RSFT
//                &kp NO &kp NO &kp PAUSE &kp BSPC &kp RALT &kp INS &kp ENTER
            >;
	};
	            // Assign a name to your new layer.
        // It's helpful to give it a descriptive name like "bluetooth_layer"
        bluetooth_layer {
            bindings = <
                // Left half - Function keys for Bluetooth control
                &kp BT_CLR  &kp BT_SEL 0 &kp BT_SEL 1 &kp BT_SEL 2 &kp BT_SEL 3 &kp BT_SEL 4 &none
                &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans

                // Right half - Transparent keys to fall back to the base layer
//                &trans &trans &trans &trans &trans &trans &trans
//                &trans &trans &trans &trans &trans &trans &trans
//                &trans &trans &trans &trans &trans &trans &trans
//                &trans &trans &trans &trans &trans &trans &trans
//                &trans &trans &trans &trans &trans &trans &trans
//                &trans &trans &trans &trans &trans &trans &trans
            >;
        };
    };
}
