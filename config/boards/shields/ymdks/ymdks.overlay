#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan0 = &kscan_split_matrix;
        zmk,matrix_transform0 = &transform_split_matrix;

        zmk,kscan1 = &kscan_i2c_ext_matrix;
        zmk,matrix_transform1 = &transform_i2c_matrix;
    };

    &i2c_2 {
        compatible = "nordic,nrf-i2c";
        sda-pin = <26>;
        scl-pin = <27>;
        status = "okay";

        mcp23018: mcp23018@20 {
            compatible = "microchip,mcp23018";
            reg = <0x20>;
            #gpio-cells = <2>;
            gpio-controller;
        };
    };

    // --- Nice!nano v2 GPIO matrix definition ---
    &kscan_split_matrix {
        compatible = "zmk,kscan-split-matrix";
        rows = <&gpio1 11>, <&gpio1 13>, <&gpio1 15>, <&gpio0 2>, <&gpio0 29>, <&gpio0 19>;
        cols = <&gpio0 8>, <&gpio0 6>, <&gpio0 22>, <&gpio0 24>, <&gpio1 0>, <&gpio0 11>, <&gpio1 4>;
        diode-direction = "row2col";
    };

    // --- MCP23018 I2C matrix definition ---
    &kscan_i2c_ext_matrix {
        compatible = "zmk,kscan-i2c-ext-matrix";
        i2c = <&i2c_2>;

        row-gpios = <&mcp23018 0 (GPIO_PULL_UP)>,
            <&mcp23018 1 (GPIO_PULL_UP)>,
            <&mcp23018 2 (GPIO_PULL_UP)>,
            <&mcp23018 3 (GPIO_PULL_UP)>,
            <&mcp23018 4 (GPIO_PULL_UP)>,
            <&mcp23018 5 (GPIO_PULL_UP)>,
            <&mcp23018 6 (GPIO_PULL_UP)>,
            <&mcp23018 7 (GPIO_PULL_UP)>;

        col-gpios = <&mcp23018 8>,
            <&mcp23018 9>,
            <&mcp23018 10>,
            <&mcp23018 11>,
            <&mcp23018 12>,
            <&mcp23018 13>,
            <&mcp23018 14>,
            <&mcp23018 15>;
    };

    transform_split_matrix: matrix_transform0 {
        compatible = "zmk,matrix-transform";
        rows = <6>;
        columns = <7>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6)
            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6)
            RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5) RC(5,6)
        >;
    };

    transform_i2c_matrix: matrix_transform1 {
        compatible = "zmk,matrix-transform";
        rows = <8>;
        columns = <8>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7)
            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7)
            RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5) RC(5,6) RC(5,7)
            RC(6,0) RC(6,1) RC(6,2) RC(6,3) RC(6,4) RC(6,5) RC(6,6) RC(6,7)
            RC(7,0) RC(7,1) RC(7,2) RC(7,3) RC(7,4) RC(7,5) RC(7,6) RC(7,7)
        >;
    };
};

